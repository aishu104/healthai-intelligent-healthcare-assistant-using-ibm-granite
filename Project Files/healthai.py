# -*- coding: utf-8 -*-
"""HealthAI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hx5NzRuFrEYMXMOSuMFwB6vl9Mq3qF-C
"""

!pip install transformers gradio accelerate sentencepiece --quiet

from transformers import AutoTokenizer, AutoModelForCausalLM
import torch

# Check for GPU
device = "cuda" if torch.cuda.is_available() else "cpu"

# Model ID
model_id = "ibm-granite/granite-3.3-2b-instruct"

# Load tokenizer and model
tokenizer = AutoTokenizer.from_pretrained(model_id)
model = AutoModelForCausalLM.from_pretrained(
    model_id,
    torch_dtype=torch.float16 if device == "cuda" else torch.float32,
    device_map="auto" if device == "cuda" else None
).to(device)

# Function to ask medical questions
def ask_healthai(question: str, instruction: str = "You are a helpful medical assistant.") -> str:
    prompt = f"<|system|>\n{instruction}</s>\n<|user|>\n{question}</s>\n<|assistant|>\n"

    inputs = tokenizer(prompt, return_tensors="pt").to(model.device)
    outputs = model.generate(
        **inputs,
        max_new_tokens=300,
        do_sample=True,
        temperature=0.7,
        top_p=0.95
    )

    result = tokenizer.decode(outputs[0], skip_special_tokens=True)

    # Return only the assistant response
    if "<|assistant|>" in result:
        return result.split("<|assistant|>")[-1].strip()
    return result.strip()

import gradio as gr

# Patient Chat
def patient_chat(question):
    try:
        if not question.strip():
            return "Please enter a medical question."
        prompt = f"A patient asked: '{question}'. Give a medically sound, empathetic response."
        return ask_healthai(prompt)
    except Exception as e:
        return f"‚ùå Error: {str(e)}"

# Disease Prediction
def disease_prediction(symptoms):
    try:
        if not symptoms.strip():
            return "Please describe your symptoms."
        prompt = (
            f"A patient reports the following symptoms: {symptoms}. "
            "Based on these symptoms, what are the most likely conditions or diseases? "
            "Give possible diagnoses, with likelihood and medical guidance."
        )
        return ask_healthai(prompt)
    except Exception as e:
        return f"‚ùå Error: {str(e)}"

# Treatment Plan
def treatment_plan(condition):
    try:
        if not condition.strip():
            return "Please enter a diagnosed condition."
        prompt = (
            f"Provide a treatment plan for the condition: {condition}. "
            "Include medications, lifestyle changes, and any required follow-up tests. "
            "Ensure the plan is evidence-based and patient-friendly."
        )
        return ask_healthai(prompt)
    except Exception as e:
        return f"‚ùå Error: {str(e)}"

# Health Analytics
def health_analytics(vitals_data):
    try:
        if not vitals_data.strip():
            return "Please enter some vital sign data (e.g., heart rate, blood pressure, etc.)"
        prompt = (
            f"Analyze the following patient health data over time: {vitals_data}. "
            "Provide health insights, detect any worrying trends, and suggest improvements. "
            "Be concise and medically accurate."
        )
        return ask_healthai(prompt)
    except Exception as e:
        return f"‚ùå Error: {str(e)}"

with gr.Blocks() as demo:
    gr.Markdown("## ü©∫ HealthAI - Intelligent Healthcare Assistant")

    with gr.Tab("üßë‚Äç‚öïÔ∏è Patient Chat"):
        question = gr.Textbox(label="Ask a medical question:")
        chat_output = gr.Textbox(label="AI Response")
        chat_btn = gr.Button("Ask")
        chat_btn.click(patient_chat, question, chat_output)

    with gr.Tab("üîé Disease Prediction"):
        symptoms = gr.Textbox(label="Describe your symptoms:")
        predict_output = gr.Textbox(label="Possible Conditions")
        predict_btn = gr.Button("Predict")
        predict_btn.click(disease_prediction, symptoms, predict_output)

    with gr.Tab("üíä Treatment Plan"):
        condition = gr.Textbox(label="Enter diagnosed condition:")
        plan_output = gr.Textbox(label="Treatment Plan")
        plan_btn = gr.Button("Generate")
        plan_btn.click(treatment_plan, condition, plan_output)

    with gr.Tab("üìä Health Analytics"):
        vitals = gr.Textbox(label="Enter health vitals (e.g., Heart Rate: 80, BP: 120/80)")
        analytics_output = gr.Textbox(label="Health Insights")
        analytics_btn = gr.Button("Analyze")
        analytics_btn.click(health_analytics, vitals, analytics_output)

demo.launch(share=True)